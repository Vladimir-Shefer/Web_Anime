import base64
from io import BytesIO, StringIO
import re
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt
import os
from keras.utils.np_utils import to_categorical
from os import listdir
import tensorflow.keras.layers as L
import numpy as np
from PIL import Image , ImageFilter
from keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.models import load_model

loaded_model = load_model("anime_gen.h5")

noice = np.random.randn(32,100)
pred = loaded_model.predict(noice)
print(type(pred[0]))
w=10
h=10
fig=plt.figure(figsize=(8, 8))
columns = 4
rows = 5
for i in range(1, columns*rows +1):
    fig.add_subplot(rows, columns, i)
    plt.imshow(pred[i])
plt.show()
x = pred[1].tobytes()
print(pred[1])
formatted = (pred[1] * 255 / np.max(pred[1])).astype('uint8')
img = Image.fromarray(formatted)
img = img.filter(ImageFilter.GaussianBlur(radius=1))
img = img.filter(ImageFilter.SHARPEN)

img.show()

buffer = BytesIO()
img.save(buffer, format="PNG")
img_str = base64.b64encode(buffer.getvalue())


image_data = base64.b64decode(img_str)
image_data = BytesIO(image_data)
img = Image.open(image_data)
      
thumb_io = BytesIO()
img.save(thumb_io, img.format)
img.show()
# z =converted_string.decode('utf-8')

